theory DH_MITM

begin

builtins: diffie-hellman, hashing

functions: h/1

// Inizio del protocollo da parte di Alice (non autenticata)
rule Initiator_Start:
  [ Fr(~a) ]
  -->
  [ Out('g'^~a), State_Initiator(~a) ]

// Attaccante intercetta g^a e risponde con g^x
rule MITM_Intercept_A:
  [ In(ga), Fr(~x) ]
  -->
  [ Out('g'^~x), MITM_A(ga, ~x) ]

// Bob risponde con g^b
rule Responder_Reply:
  [ In(gx), Fr(~b) ]
  -->
  [ Out('g'^~b), State_Responder(~b), Record_B(gx, ~b) ]

// Attaccante intercetta g^b e lo sostituisce con g^y
rule MITM_Intercept_B:
  [ In(gb), Fr(~y), MITM_A(ga, x) ]
  -->
  [ Out('g'^~y), MITM_Finish(ga, x, gb, ~y) ]

// Alice conclude e calcola la chiave (usando g^y)
rule Initiator_Conclude:
  [ In(gy), State_Initiator(a) ]
  -->
  [ Key('A', 'B', h(gy^a)), Commit('A', 'B') ]

// Bob conclude e calcola la chiave (usando g^x)
rule Responder_Conclude:
  [ State_Responder(b), Record_B(gx, b) ]
  -->
  [ Key('B', 'A', h(gx^b)), Commit('B', 'A') ]

// L'attaccante apprende entrambi i segreti
rule MITM_Derive_Secrets:
  [ MITM_Finish(ga, x, gb, y) ]
  -->
  [ K(h(ga^y)), K(h(gb^x)) ]

// Autenticazione fallita: A crede di parlare con B, ma non Ã¨ vero
lemma authentication_violation:
  "Ex #i. Commit('A','B')@i & not(Ex #j. Commit('B','A')@j)"

// Segretezza fallita: attaccante conosce la chiave
lemma secrecy_violation:
  "Ex k #i. Key('A','B',k)@i & K(k)@i"

end
